{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "base template": {
    "prefix": "hello",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "typedef long long ll;",
      "typedef vector<int> vi;",
      "typedef vector<long long> vll;",
      "typedef pair<long long, long long> pll;",
      "typedef pair<int, int> pi;",
      "#define all(_a) _a.begin(), _a.end()",
      "#define read(_a) for (auto &e : _a) cin >> e;",
      "#define print(_a) for (auto &e : _a) { cout << e << \" \"; } cout << \"\\n\";",
      "const int Mod = 1e9 + 7;",
      "",
      "void testCase() {",
      "}",
      "",
      "int main() {",
      "    ios::sync_with_stdio(false); cin.tie(0);",
      "    int t = 1;",
      "    cin >> t;",
      "    while (t--) {",
      "        testCase();",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": ""
  },

  "segment tree": {
    "prefix": "segTree",
    "body": [
      "struct segmentTree {",
      "    int size;",
      "    vector<long long> tree;",
      "    long long NEUTRAL_ELEMENT= 0LL;",
      "",
      "    void init(int n) {",
      "        size = 1;",
      "        while (size < n) size *= 2;",
      "        tree.assign(2 * size, NEUTRAL_ELEMENT);",
      "    }",
      "",
      "    long long merge(long long a, long long b) {",
      "        return a + b;",
      "    }",
      "",
      "    void build(vector<int> &v) {",
      "        int n = v.size();",
      "        init(n);",
      "        for (int i = 0; i < n; i++) {",
      "            tree[i + size] = v[i];",
      "        }",
      "        for (int i = size - 1; i >= 1; i--) {",
      "            tree[i] = merge(tree[2 * i], tree[2 * i + 1]);",
      "        }",
      "    }",
      "",
      "    void set(int i, int val) {",
      "        set(i, val, 1, 0, size - 1);",
      "    }",
      "",
      "    void set(int i, int val, int x, int lx, int rx) {",
      "        if (lx == rx) {",
      "            tree[x] = val;",
      "            return;",
      "        }",
      "        int m = lx + (rx - lx) / 2;",
      "        if (i <= m) set(i, val, 2 * x, lx, m);",
      "        else set(i, val, 2 * x + 1, m + 1, rx);",
      "        tree[x] = merge(tree[2 * x], tree[2 * x + 1]);",
      "    }",
      "",
      "    long long solve(int l, int r) {",
      "        return solve(l, r, 1, 0, size - 1);",
      "    }",
      "",
      "    long long solve(int l, int r, int x, int lx, int rx) {",
      "        if (lx > r or rx < l) return NEUTRAL_ELEMENT;",
      "        if (lx >= l and rx <= r) return tree[x];",
      "        int m = lx + (rx - lx) / 2;",
      "        long long s1 = solve(l, r, 2 * x, lx, m);",
      "        long long s2 = solve(l, r, 2 * x + 1, m + 1, rx);",
      "        return merge(s1, s2);",
      "    }",
      "",
      "    long long find(int k) {",
      "        return find(k, 1, 0, size - 1);",
      "    }",
      "",
      "    long long find(int k, int x, int lx, int rx) {",
      "        if (lx == rx) {",
      "            return lx;",
      "        }",
      "        int m = lx + (rx - lx) / 2;",
      "        int sl = tree[2 * x];",
      "        if (k <= sl) return find(k, 2 * x, lx, m);",
      "        else return find(k - sl, 2 * x + 1, m + 1, rx);",
      "    }",
      "};",
      ""
    ],
    "description": ""
  },

  "binary exponentiation": {
    "prefix": "binExp",
    "body": [
      "long long binExp(long long a, long long b) {",
      "    long long res = 1;",
      "    while (b > 0) {",
      "        if (b & 1) res *= a;",
      "        a *= a;",
      "        b >>= 1;",
      "    }",
      "    return res;",
      "}"
    ],
    "description": ""
  },

  "binary exponentiation with Mod": {
    "prefix": "binExpMod",
    "body": [
      "long long binExpMod(long long a, long long b, long long Mod) {",
      "    long long res = 1;",
      "    while (b > 0) {",
      "        if (b & 1) res = (res * a) % Mod;",
      "        a = (a * a) % Mod;",
      "        b >>= 1;",
      "    }",
      "    return res;",
      "}"
    ],
    "description": ""
  },

  "sieve of eratosthenes": {
    "prefix": "sieve",
    "body": [
      "const int N = 1e8;",
      "",
      "vector<char> isPrime(N, true);",
      "",
      "void sieve() {",
      "    isPrime[0] = isPrime[1] = false;",
      "    for (ll i = 2; i * i < N; i++) {",
      "        if (isPrime[i]) {",
      "            for (ll j = i * i; j < N; j += i) isPrime[j] = false;",
      "        }",
      "    }",
      "}"
    ],
    "description": ""
  },

  "spf using sieve": {
    "prefix": "spf",
    "body": [
      "const int N = 1e6 + 1;",
      "vector<int> spf(N);",
      "",
      "void sieveSpf() {",
      "    for (long long i = 1; i < N; i++) spf[i] = i;",
      "    for (long long i = 4; i < N; i += 2) spf[i] = 2;",
      "    for (long long i = 3; i * i < N; i++) {",
      "        if (spf[i] == i) {",
      "            for (long long j = i * i; j < N; j += i) {",
      "                if (spf[j] == j) spf[j] = i;",
      "            }",
      "        }",
      "    }",
      "}",
      "",
      "map<int, int> getFactorization(int n) {",
      "    map<int, int> ans;",
      "    while (n != 1) {",
      "        ans[spf[n]]++;",
      "        n /= spf[n];",
      "    }",
      "    return ans;",
      "}"
    ],
    "description": ""
  },

  "prime factorization": {
    "prefix": "factorization",
    "body": [
      "vector<int> factorization(int n) {",
      "    vector<int> ans;",
      "    for (int i = 2; i * i <= n; i++) {",
      "        while (n % i == 0) {",
      "            ans.push_back(i);",
      "            n /= i;",
      "        }",
      "    }",
      "    if (n > 1) ans.push_back(n);",
      "    return ans;",
      "}"
    ],
    "description": ""
  },

  "disjoint set uninon": {
    "prefix": "dsu",
    "body": [
      "struct DisjointSetUnion {",
      "    vector<int> parent, size;",
      "",
      "    DisjointSetUnion(int n) {",
      "        parent.assign(n + 1, 0);",
      "        size.assign(n + 1, 0);",
      "        for (int i = 1; i <= n; i++) {",
      "            parent[i] = i;",
      "            size[i] = 1;",
      "        }",
      "    }",
      "",
      "    int Find(int a) {",
      "        if (parent[a] == a) return a;",
      "        return parent[a] = Find(parent[a]);",
      "    }",
      "",
      "    void Union(int a, int b) {",
      "        a = Find(a);",
      "        b = Find(b);",
      "        if (a != b) {",
      "            if (size[a] < size[b]) swap(a, b);",
      "            parent[b] = a;",
      "            size[a] += size[b];",
      "        }",
      "    }",
      "};",
      ""
    ],
    "description": ""
  },

  "segemented sieve": {
    "prefix": "segmentedSieve",
    "body": [
      "vector<char> segmentedSieve(long long L, long long R) {",
      "    // generate all primes up to sqrt(R)",
      "    long long lim = sqrt(R);",
      "    vector<char> mark(lim + 1, false);",
      "    vector<long long> primes;",
      "    for (long long i = 2; i <= lim; ++i) {",
      "        if (!mark[i]) {",
      "            primes.emplace_back(i);",
      "            for (long long j = i * i; j <= lim; j += i)",
      "                mark[j] = true;",
      "        }",
      "    }",
      "",
      "    vector<char> isPrime(R - L + 1, true);",
      "    for (long long i : primes)",
      "        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)",
      "            isPrime[j - L] = false;",
      "    if (L == 1)",
      "        isPrime[0] = false;",
      "    return isPrime;",
      "}"
    ],
    "description": ""
  }
}
